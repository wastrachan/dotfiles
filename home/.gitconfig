[color]
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green

[alias]
    a = add                           # add
    chunkyadd = add --patch           # stage commits chunk by chunk
    recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'
    b = branch -v                     # branch (verbose)
    br = branch -r                    # branch (remote)
    c = commit -m                     # commit with message
    ca = commit -am                   # commit all with message
    ci = commit                       # commit
    amend = commit --amend            # ammend your last commit
    ammend = commit --amend           # ammend your last commit
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
    cp = cherry-pick -x               # grab a change from a branch
    d = diff                          # diff unstaged changes
    dt = difftool                     # diff unstaged changes with difftool
    dc = diff --cached                # diff staged changes
    last = diff HEAD^                 # diff last committed change
    l = log --graph --date=short
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    cl = log --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s\" --abbrev-commit --date=relative
    changelog = log --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s\" --abbrev-commit --date=relative
    pl = pull                         # pull
    fo = fetch origin                 # fetch origin
    fu = fetch upstream               # fetch upstream
    ps = push                         # push
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase
    r = remote -v                     # show remotes (verbose)
    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)
    sp = stash pop                    # apply stash and drop
    s = status                        # status
    st = status                       # status
    stat = status                     # status
    t = tag -n                        # show tags with <n> lines of each tag message

[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[mergetool]
    prompt = false

[mergetool "mvimdiff"]
    cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup=false

[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" \"$REMOTE\"

[mergetool]
	prompt = false

[merge]
    # summary = true
    # verbosity = 1
    tool = Kaleidoscope
    # tool = mvimdiff

[apply]
    whitespace = nowarn

[branch]
    autosetupmerge = true

[push]
    default = upstream

[core]
    autocrlf = false
    editor = vim
    excludesfile = ~/.gitignore

[advice]
    statusHints = false

[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool]
    prompt = false

[diff]
    tool = Kaleidoscope
    # mnemonicprefix = true
    # algorithm = patience

[rerere]
    enabled = true

[include]
    path = .gitconfig.user

[user]
    name = wastrachan
    email = winston.astrachan@phobio.com

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
